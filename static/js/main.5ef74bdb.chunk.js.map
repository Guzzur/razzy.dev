{"version":3,"sources":["components/TopBar.jsx","components/About.jsx","components/Projects.jsx","App.js","serviceWorker.js","index.js"],"names":["TopBar","state","collapse1","collapseID","toggleCollapse","_this","setState","prevState","toggleSingleCollapse","collapseId","Object","objectSpread","defineProperty","_this2","this","react_default","a","createElement","Row","className","style","maxWidth","Card","Body","mdbreact_esm","color","light","to","fontSize","cursor","onClick","id","isOpen","navbar","left","Component","About","Projects","App","react_router_dom","components_TopBar","Container","react_router","path","component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.5ef74bdb.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport { Row, Card, Navbar } from \"react-bootstrap\";\nimport {\n  MDBNavbar,\n  MDBNavbarBrand,\n  MDBNavbarNav,\n  MDBNavItem,\n  MDBNavLink,\n  MDBCollapse,\n  MDBContainer,\n  MDBHamburgerToggler\n} from \"mdbreact\";\n\nclass TopBar extends Component {\n  state = {\n    collapse1: false,\n    collapseID: \"\"\n  };\n\n  toggleCollapse = collapseID => () => {\n    this.setState(prevState => ({\n      collapseID: prevState.collapseID !== collapseID ? collapseID : \"\"\n    }));\n  };\n\n  toggleSingleCollapse = collapseId => {\n    this.setState({\n      ...this.state,\n      [collapseId]: !this.state[collapseId]\n    });\n  };\n\n  render() {\n    return (\n      <Row className=\"w-100 p-0 m-0\" style={{ maxWidth: \"1200px\" }}>\n        <Card className=\"w-100\">\n          <Card.Body className=\"p-0 m-0\">\n            <MDBContainer>\n              <MDBNavbar color=\"amber lighten-4\" light>\n                <MDBContainer>\n                  <MDBNavbarBrand>\n                    <MDBNavLink to=\"/\" className=\"px-0\" style={{ color: \"#880000\" }}>\n                      razzy<span style={{ fontSize: \"0.6rem\" }}>.dev</span>\n                    </MDBNavLink>\n                  </MDBNavbarBrand>\n                  <div\n                    style={{ cursor: \"pointer\" }}\n                    onClick={() => this.toggleSingleCollapse(\"collapse1\")}\n                  >\n                    <MDBHamburgerToggler color=\"#880000\" id=\"hamburger1\" />\n                  </div>\n                  <MDBCollapse isOpen={this.state.collapse1} navbar>\n                    <MDBNavbarNav left>\n                      <MDBNavItem>\n                        <MDBNavLink to=\"/posts\">Posts</MDBNavLink>\n                      </MDBNavItem>\n                      <MDBNavItem>\n                        <MDBNavLink to=\"/projects\">Projects</MDBNavLink>\n                      </MDBNavItem>\n                      <MDBNavItem>\n                        <MDBNavLink to=\"/about\">About</MDBNavLink>\n                      </MDBNavItem>\n                    </MDBNavbarNav>\n                  </MDBCollapse>\n                </MDBContainer>\n              </MDBNavbar>\n            </MDBContainer>\n          </Card.Body>\n        </Card>\n      </Row>\n    );\n  }\n}\n\nexport default TopBar;\n\n// import React from 'react';\n// import { Row, Card, Navbar } from 'react-bootstrap';\n\n// class TopBar extends React.Component {\n//   render() {\n//     return (\n//       // <Nav\n//       //   activeKey=\"/home\"\n//       //   onSelect={(selectedKey) => alert(`selected ${selectedKey}`)}\n//       // >\n//       //   <Nav.Item>\n//       //     <Nav.Link href=\"/home\">Active</Nav.Link>\n//       //   </Nav.Item>\n//       //   <Nav.Item>\n//       //     <Nav.Link eventKey=\"link-1\">Link</Nav.Link>\n//       //   </Nav.Item>\n//       //   <Nav.Item>\n//       //     <Nav.Link eventKey=\"link-2\">Link</Nav.Link>\n//       //   </Nav.Item>\n//       //   <Nav.Item>\n//       //     <Nav.Link eventKey=\"disabled\" disabled>\n//       //       Disabled\n//       //     </Nav.Link>\n//       //   </Nav.Item>\n//       // </Nav>\n//       <Row className='w-100 p-0 m-0' style={{ maxWidth: '1200px' }}>\n//         <Card className=\"w-100\">\n//           <Card.Body>\n//             <Navbar>\n//               <Navbar.Toggle />\n//               {/* <Navbar.Collapse className=\"justify-content-end\">\n//                 <Navbar.Text>\n//                   Right bar\n//                 </Navbar.Text>\n//               </Navbar.Collapse> */}\n//             </Navbar>\n//           </Card.Body>\n//         </Card>\n//       </Row>\n//     );\n//   }\n// }\n\n// export default TopBar;\n","import React, { Component } from \"react\";\nimport { Row, Col, Card, Container } from \"react-bootstrap\";\n\nclass About extends Component {\n  state = {};\n\n  render() {\n    return (\n      <div>\n        <h1>About</h1>\n      </div>\n    );\n  }\n}\n\nexport default About;\n","import React, { Component } from \"react\";\nimport { Row, Col, Card, Container } from \"react-bootstrap\";\n\nclass Projects extends Component {\n  state = {};\n\n  render() {\n    return (\n      <div>\n        <h1>Projects</h1>\n      </div>\n    );\n  }\n}\n\nexport default Projects;\n","import React from \"react\";\nimport { BrowserRouter as Router, Route, Switch, Redirect, withRouter } from \"react-router-dom\";\nimport { connect } from \"react-redux\";\n\nimport \"./App.css\";\nimport { Row, Card, Container } from \"react-bootstrap\";\n\nimport TopBar from \"./components/TopBar\";\nimport About from \"./components/About\";\nimport Projects from \"./components/Projects\";\n\nfunction App() {\n  return (\n    <Router>\n      <Row className=\"w-100 p-0 m-0 justify-content-center\">\n        <TopBar />\n        <Row className=\"w-100 p-0 m-0\" style={{ maxWidth: \"1200px\" }}>\n          <Card className=\"w-100 border-0\">\n            <Card.Body className=\"px-0 py-5 m-0\">\n              <Container>\n                <Container>\n                  <Container>\n                    <Switch>\n                      <Route path=\"/about\" component={About} />\n                      <Route path=\"/projects\" component={Projects} />\n                    </Switch>\n                  </Container>\n                </Container>\n              </Container>\n            </Card.Body>\n          </Card>\n        </Row>\n      </Row>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}